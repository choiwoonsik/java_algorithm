## 필수 테크닉
- 정렬
- 문자열 처리
- DP
- Dijkstra
- BFS & DFS
- 완전 탐색
- 이분 탐색

## 높은 난이도로 나오는 알고리즘
- 배열에서의 DP
- Tree에서의 DP
- 투 포인터
- 위상 정렬

## 자료구조
- HashMap
- Dequeue (Queue)
- Stack
- Priority Queue
- Dynamic Array

## 좋은 습관
- 문제를 올바른 순서로 이해한다
    - 문제 읽기 - 시간, 메모리 제한 확인, 문서 전체를 꼼꼼히 일어야 한다
    - 제공되는 정보 (변수들) 정리, 예제 데이터에 대해 이해
    - 가능한 최대, 최소 정답에 맞는 데이터를 직접 생성
    - 키워드가 되는 단어들을 체크

- 시간 복잡도, 공간 복잡도를 계산하자
    - BFS & DFS : 시간 복잡도 O(V + E) / 공간 복잡도 O(V + E)
    - Dijkstra : 시간 복잡도 O(E log E) or O(E log V) / 공간 복잡도 O(V + E)
    - Quick Sort : 시간 복잡도 O(N log N) / 공간 복잡도 O(V)
    - Binary Search : 시간 복잡도 O(N log N) / 공간 복잡도 O(N)

    시간을 아낄 수 있다 - 짤 가치가 있는지 알 수 있다

- 코드를 효율적으로 함수화해서 구현하자

- 부분 점수를 챙기자


#이분탐색
정렬이 보장되는 배열에서 기준 x를 가지고 범위를 "이분"하면서 탐색하는 방법
L : 탐색할 가치가 있는 범위의 왼쪽 끝 인덱스
R : 탐색할 가치가 있는 범위의 오른쪽 끝 인덱스
Result : 탐색한 x의 위치

